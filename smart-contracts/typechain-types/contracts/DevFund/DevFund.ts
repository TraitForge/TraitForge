/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DevFundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addDev"
      | "claim"
      | "devInfo"
      | "isDev"
      | "owner"
      | "pendingRewards"
      | "removeDev"
      | "renounceOwnership"
      | "rewardPerDev"
      | "totalDevCount"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddDev"
      | "Claim"
      | "FundReceived"
      | "OwnershipTransferred"
      | "RemoveDev"
  ): EventFragment;

  encodeFunctionData(functionFragment: "addDev", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isDev", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDev",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerDev",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDevCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addDev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeDev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerDev",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDevCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AddDevEvent {
  export type InputTuple = [dev: AddressLike];
  export type OutputTuple = [dev: string];
  export interface OutputObject {
    dev: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [dev: AddressLike, amount: BigNumberish];
  export type OutputTuple = [dev: string, amount: bigint];
  export interface OutputObject {
    dev: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundReceivedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveDevEvent {
  export type InputTuple = [dev: AddressLike];
  export type OutputTuple = [dev: string];
  export interface OutputObject {
    dev: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DevFund extends BaseContract {
  connect(runner?: ContractRunner | null): DevFund;
  waitForDeployment(): Promise<this>;

  interface: DevFundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addDev: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  devInfo: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { rewardDebt: bigint; pendingRewards: bigint }],
    "view"
  >;

  isDev: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingRewards: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  removeDev: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardPerDev: TypedContractMethod<[], [bigint], "view">;

  totalDevCount: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addDev"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "devInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { rewardDebt: bigint; pendingRewards: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDev"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingRewards"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeDev"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardPerDev"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDevCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AddDev"
  ): TypedContractEvent<
    AddDevEvent.InputTuple,
    AddDevEvent.OutputTuple,
    AddDevEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "FundReceived"
  ): TypedContractEvent<
    FundReceivedEvent.InputTuple,
    FundReceivedEvent.OutputTuple,
    FundReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemoveDev"
  ): TypedContractEvent<
    RemoveDevEvent.InputTuple,
    RemoveDevEvent.OutputTuple,
    RemoveDevEvent.OutputObject
  >;

  filters: {
    "AddDev(address)": TypedContractEvent<
      AddDevEvent.InputTuple,
      AddDevEvent.OutputTuple,
      AddDevEvent.OutputObject
    >;
    AddDev: TypedContractEvent<
      AddDevEvent.InputTuple,
      AddDevEvent.OutputTuple,
      AddDevEvent.OutputObject
    >;

    "Claim(address,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "FundReceived(address,uint256)": TypedContractEvent<
      FundReceivedEvent.InputTuple,
      FundReceivedEvent.OutputTuple,
      FundReceivedEvent.OutputObject
    >;
    FundReceived: TypedContractEvent<
      FundReceivedEvent.InputTuple,
      FundReceivedEvent.OutputTuple,
      FundReceivedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RemoveDev(address)": TypedContractEvent<
      RemoveDevEvent.InputTuple,
      RemoveDevEvent.OutputTuple,
      RemoveDevEvent.OutputObject
    >;
    RemoveDev: TypedContractEvent<
      RemoveDevEvent.InputTuple,
      RemoveDevEvent.OutputTuple,
      RemoveDevEvent.OutputObject
    >;
  };
}
